Connect to Ubuntu in ec2
	#ssh -i "Bryan-EC2.pem" ubuntu@ec2-3-0-92-128.ap-southeast-1.compute.amazonaws.com
	ECDSA key fingerprint is SHA256:6W2bocWxdpVTugQ8nWIWXyW3Qes8bKKLG7mp5otUCko.

### install docker on ubuntu ### https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04

# update, BUT IT WILL TAKE A WHILE
sudo apt-get update

# install a few prerequisite packages which let apt use packages over HTTPS
sudo apt install apt-transport-https ca-certificates curl software-properties-common

## MAY NEED TO ANS TO PROMPT
### 6
### 71

# Then add the GPG key for the official Docker repository to your system:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# add the GPG key for the official Docker repository to your system
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

# update the package database with the Docker packages from the newly added repo:
sudo apt update

# Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:
sudo apt-cache policy docker-ce

# Finally, install Docker
sudo apt install docker-ce

# Configure Docker to start on boot
sudo systemctl enable docker.service

sudo systemctl enable containerd.service

# Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:
systemctl status docker

# start docker
/etc/init.d/docker start
# or try
# dockerd

# add current user to docker grp
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker

Linux docker commands:

docker run --name jenkins-docker --rm --detach \
	  --privileged --network jenkins --network-alias docker \
	  --env DOCKER_TLS_CERTDIR=/certs \
	  --volume jenkins-docker-certs:/certs/client \
	  --volume jenkins-data:/var/jenkins_home \
	  docker:dind

docker run --name jenkins-blueocean --rm --detach \
	  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
	  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \
	  --volume jenkins-data:/var/jenkins_home \
	  --volume jenkins-docker-certs:/certs/client:ro \
	  --volume "%HOMEDRIVE%%HOMEPATH%":/home \
	  --publish 8080:8080 --publish 50000:50000 myjenkins-blueocean:1.1


docker run \
  --name jenkins-docker \
  --rm \
  --detach \
  --privileged \
  --network jenkins \
  --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 3000:3000 \
  --publish 2376:2376 \
  docker:dind \
  --storage-driver overlay2
	  
docker run \
  --name jenkins-blueocean \
  --rm \
  --detach \
  --network jenkins \
  --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client \
  --env DOCKER_TLS_VERIFY=1 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  --volume "$HOME":/home \
  --publish 8080:8080 \
  --publish 50000:50000 \
  myjenkins-blueocean:1.1
	  
# Create the docker file
	FROM jenkins/jenkins:2.303.2-jdk11
	USER root
	RUN apt-get update && apt-get install -y apt-transport-https \
		   ca-certificates curl gnupg2 \
		   software-properties-common
	RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
	RUN apt-key fingerprint 0EBFCD88
	RUN add-apt-repository \
		   "deb [arch=amd64] https://download.docker.com/linux/debian \
		   $(lsb_release -cs) stable"
	RUN apt-get update && apt-get install -y docker-ce-cli
	USER jenkins
	RUN jenkins-plugin-cli --plugins "blueocean:1.24.7 docker-workflow:1.26"

	# Name is 'Dockerfile'
	# Save as 'All types'

Create Image from docker file
# docker build -t myjenkins-blueocean:1.1 .

To go into the docker container
# docker container exec -it jenkins-blueocean bash
 
Password for adminstrator:
# docker container exec -it jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword


docker system prune -a 
# WARNING! This will remove:- all stopped containers- all networks not used by at least one container- all images without at least one container associated to them- all build cache Are you sure you want to continue? [y/N] y Deleted Networks: jenkins

docker volume prune \
#WARNING! This will remove all local volumes not used by at least one containe, Are you sure you want to continue? [y/N] y Deleted Volumes:jenkins-datajenkins-docker-certs
------------------------------------------ extra link  -----------------------------------------------------------------------
https://docs.docker.com/engine/install/ubuntu/

# install nginx in ubuntu
https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04

# configure nginx https reverse-proxy
https://www.scaleway.com/en/docs/tutorials/nginx-reverse-proxy/

# configure https in the project -> nginx server
https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/

# configure https with other server
https://certbot.eff.org/

# personal access token
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

## To integrate Jenkins with Github, at the Jenkins Source Code Management section, select 
Git and enter the Repository URL https://yourPAC@github.com/SIT-ICT3x03/Team...git

# webhook github and jenkins
https://prodevans.com/index.php/2020/06/13/how-to-integrate-your-github-repository-to-your-jenkins-project/

## Configuring GitHub
# Step 1: Go to your GitHub repository and click on ‘Settings’.
# Step 2: Click on Webhooks and then click on ‘Add webhook’.
# Step 3: in the ‘Payload URL’ field, paste your Jenkins environment URL. 
	At the end of this URL add /github-webhook/. 
	In the ‘Content type’ select ‘application/json’ and leave the ‘Secret’ field empty.
# Step 4: in the ‘Which events would you like to trigger this webhook?’ choose ‘Just Push event’ . 
	At the end of this option, make sure that ‘Active’ is checked and click on ‘Add webhook’.

## Configuring Jenkins

# Step 5: In Jenkins, click on ‘New Item’ to create a new project.
# Step 6: Give your project a name, them choose ‘Freestyle project’ and finally click on ‘OK’.
# Step 7: Click on the ‘Source Code Management’ tab.
# Step 8: Click on Git and paste your GitHub repository URL in the ‘Repository URL’ field
# Step 9: Click on the ‘Build Triggers’ tab and then on the ‘GitHub hook trigger for GITScm polling’. 
	Or, choose the trigger of your choice.
## Triggering the Jenkins Job to Run with Every Code Commit
# Step 11: Go back to your GitHub repository, edit the index.jsp file and commit the changes.
# Step 13: Go back to your Jenkins project and you’ll see that a new job was triggered a. 
	Click on the little arrow next to the job and choose ‘Console Output’.


------------------------------------------ lab start  ------------------------------------------------------------------------
Lab 5 - Setting up Jenkins
1) Install Docker
	https://docs.docker.com/desktop/windows/install/
	# test that docker is installed and running
		docker run hello-docker

	# Docker cheat sheet
		https://dockerlabs.collabnix.com/docker/cheatsheet/

2) Setting up Jenkins
	# Create network bridge
		docker network create jenkins

	# Run a docker in docker image
		docker run --name jenkins-docker --rm --detach ^
		  --privileged --network jenkins --network-alias docker ^
		  --env DOCKER_TLS_CERTDIR=/certs ^
		  --volume jenkins-docker-certs:/certs/client ^
		  --volume jenkins-data:/var/jenkins_home ^
		  docker:dind

	# Create the docker file
		FROM jenkins/jenkins:2.303.2-jdk11
		USER root
		RUN apt-get update && apt-get install -y apt-transport-https \
			   ca-certificates curl gnupg2 \
			   software-properties-common
		RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
		RUN apt-key fingerprint 0EBFCD88
		RUN add-apt-repository \
			   "deb [arch=amd64] https://download.docker.com/linux/debian \
			   $(lsb_release -cs) stable"
		RUN apt-get update && apt-get install -y docker-ce-cli
		USER jenkins
		RUN jenkins-plugin-cli --plugins "blueocean:1.24.7 docker-workflow:1.26"

		# Name is 'Dockerfile'
		# Save as 'All types'

	# Create Image from docker file
		docker build -t myjenkins-blueocean:1.1 .

	# Run the docker image
		docker run --name jenkins-blueocean --rm --detach ^
		  --network jenkins --env DOCKER_HOST=tcp://docker:2376 ^
		  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 ^
		  --volume jenkins-data:/var/jenkins_home ^
		  --volume jenkins-docker-certs:/certs/client:ro ^
		  --publish 8080:8080 --publish 50000:50000 myjenkins-blueocean:1.1
	  
	# Check on docker desktop that both containers are running
	
	# If need to go in
		docker exec -it jenkins-blueocean bash

	# Also can try running outside without docker in docker
		docker run --name jenkins-blueocean --rm --detach ^
			--user root ^
			--volume /var/run/docker.sock:/var/run/docker.sock ^
			--volume jenkins-data:/var/jenkins_home ^
			--volume "%HOMEDRIVE%%HOMEPATH%":/home ^
			--publish 8080:8080 myjenkins-blueocean:1.1
		
	# If you want to stop
		docker stop jenkins-blueocean jenkins-docker


	# Getting the adminstrator password for first time run and setup
		# Click the cude container icon in docker desktop
		# The password should be there
			ce452b7c8e174a7a97f878a62be2dee7

	# Install suggested plugins

	# For simplicity, all fields are 'admin'
		# email is admin@admin.admin

	# Jenkins URL
		http://localhost:8080/

	# If for some reason cannot run some stuff, try run twice
	
	# Fork the sample node.js thing
		https://github.com/jeremychua201/simple-node-js-react-npm-app

		# Clone to local repo

3) Create a Pipeline in Jenkins
	# Make a new Item in Jenkins
		# inside Jenkins on the left click 'New Item'
	
		# The name is
			'simple-node-js-react-npm-app'
		
		# Choose pipeline
			scroll down and click 'Pipeline'
		
		# Description is optional
	
		# Go to pipeline tab
		# Under the definition, choose 'Pipeline script from SCM
		# Under the SCM, choose 'Git'
		# By right can use this route
			/home/Documents/GitHub/simple-node-js-react-npm-app
		# But i used this instead
			https://github.com/jeremychua201/simple-node-js-react-npm-app
		
		# Created le
	
	# Create a 'Jenkinsfile'
	# inside put
		pipeline {
			agent {
				docker {
					image 'node:lts-buster-slim' 
					args '-p 3000:3000' 
				}
			}
			stages {
				stage('Build') { 
					steps {
						sh 'npm install' 
					}
				}
			}
		}
	
	# Place it in the root of the repo
	# Commit the change
	
	# Go back to Jenkins dashboard
	# Go to the BlueOcean tab
	
	# It should say this job has not been run
	# click 'run'
	# Then click 'started by admin'
	# Everything should pass
	
	# Add a test stage to the pipeline
	# Change the Jenkinsfileto this
		pipeline {
			agent {
				docker {
					image 'node:lts-buster-slim'
					args '-p 3000:3000'
				}
			}
			environment {
				CI = 'true' 
			}
			stages {
				stage('Build') {
					steps {
						sh 'npm install'
					}
				}
				stage('Test') { 
					steps {
						sh './jenkins/scripts/test.sh' 
					}
				}
			}
		}
	
	# Save and commit the change
	
	# Go back to bluecoean in Jenkins and click run again
	
	# The tests should pass
	
	# Add a deliever stage
	# Go back to the Jenkinsfile
	# change it to this
		pipeline {
			agent {
				docker {
					image 'node:lts-buster-slim'
					args '-p 3000:3000'
				}
			}
			environment { 
				CI = 'true'
			}
			stages {
				stage('Build') {
					steps {
						sh 'npm install'
					}
				}
				stage('Test') {
					steps {
						sh './jenkins/scripts/test.sh'
					}
				}
				stage('Deliver') { 
					steps {
						sh './jenkins/scripts/deliver.sh' 
						input message: 'Finished using the web site? (Click "Proceed" to continue)' 
						sh './jenkins/scripts/kill.sh' 
					}
				}
			}
		}
	
	# Save and commit the change
	# Run the build again
	# Should be able to go to localhost:3000
	# But i couldn't go
	
	# Then done le

------------------------------------------ End of Lab 5 -----------------------------------------

Lab 6 - OWASP Dependency-Check
1) Run docker in  docker
	docker run --name jenkins-docker --rm --detach ^
	  --privileged --network jenkins --network-alias docker ^
	  --env DOCKER_TLS_CERTDIR=/certs ^
	  --volume jenkins-docker-certs:/certs/client ^
	  --volume jenkins-data:/var/jenkins_home ^
	  docker:dind
  
2) Run blue ocean
	docker run --name jenkins-blueocean --rm --detach ^
	  --network jenkins --env DOCKER_HOST=tcp://docker:2376 ^
	  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 ^
	  --volume jenkins-data:/var/jenkins_home ^
	  --volume jenkins-docker-certs:/certs/client:ro ^
	  --volume "%HOMEDRIVE%%HOMEPATH%":/home ^
	  --publish 8080:8080 --publish 50000:50000 myjenkins-blueocean:1.1
	  
	username: admin
	password: admin

3) Install OWASP Dependency Check
	# Go to Manage Jenkins > Manage Plugins > Available
	# Look for 'OWASP Dependency-Check' and install

	# Go to Manage Jenkins > Global Tool Configuration
	# Scroll to Dependency-Check and add Dependency-Check

	# I used 'Default'

	# Create a new pipeline like in Lab 5
	# Used URL 'https://github.com/jeremychua201/JenkinsDependencyCheckTest'
	# Add the Jenkinsfile
		pipeline {
			agent any
			stages {
				stage('Checkout SCM') {
					steps {
						git 'https://github.com/jeremychua201/JenkinsDependencyCheckTest'
					}
				}

				stage('OWASP DependencyCheck') {
					steps {
						dependencyCheck additionalArguments: '--format HTML --format XML', odcInstallation: 'Default'
					}
				}
			}	
			post {
				success {
					dependencyCheckPublisher pattern: 'dependency-check-report.xml'
				}
			}
		}

	# Commit jenkins file to the repo
	# Run the build
	# The name in the Jenkinsfile and the OWASP Dependency-Check has to be the same

	# Go to dashboard > owasp-dcp > status
	# from here can also see details build #6
	# inside can see Dependency-Check and workspaces
	# from workspaces, go in then download and open 'dependency-check-report.html'

	# Suppress false positive
	# Go to the false positive, example 'CVE-2015-9251'
	# click supress
	# view complete XML
	# Copy it then save it as an XML in the root, same level as the jenkinsfile

	# change the jenkins file to include the suppression
		pipeline {
			agent any
			stages {
				stage('Checkout SCM') {
					steps {
						git 'https://github.com/jeremychua201/JenkinsDependencyCheckTest'
					}
				}

				stage('OWASP DependencyCheck') {
					steps {
						dependencyCheck additionalArguments: '--format HTML --format XML --suppression suppression.xml', odcInstallation: 'Default'
					}
				}
			}	
			post {
				success {
					dependencyCheckPublisher pattern: 'dependency-check-report.xml'
				}
			}
		}

	# save adn commit the change

	# see that now there are only three vulnerbilities

------------------------------------------ End of Lab 6 -----------------------------------------

Lab 7a
1) Start initial Git repo for testing
	# I used Github Desktop to add and commit intial files
	
2) Start Docker and run jenkins
	# New Docker command to fix the home repo issue
docker run ^
--name jenkins-docker ^
--rm ^
--detach ^
--privileged ^
--network jenkins ^
--network-alias docker ^
--env DOCKER_TLS_CERTDIR=/certs ^
--volume jenkins-docker-certs:/certs/client ^
--volume jenkins-data:/var/jenkins_home ^
--publish 3000:3000 ^
--publish 2376:2376 ^
docker:dind ^
--storage-driver overlay2
	  
docker run ^
--name jenkins-blueocean ^
--rm ^
--detach ^
--network jenkins ^
--env DOCKER_HOST=tcp://docker:2376 ^
--env DOCKER_CERT_PATH=/certs/client ^
--env DOCKER_TLS_VERIFY=1 ^
--volume jenkins-data:/var/jenkins_home ^
--volume jenkins-docker-certs:/certs/client:ro ^
--volume "%HOMEDRIVE%%HOMEPATH%":/home ^
--publish 8080:8080 ^
--publish 50000:50000 ^
myjenkins-blueocean:1.1	
	  
3) Create a new pipeline
	# Login to Jenkins and Start a new pipeline
	# This is the path i used:
	# /home/Documents/GitHub/jenkins-phpunit-test
	
	### if the build doesn't trigger, go to the pipeline config
	### Change the 'master' to 'main'
	
	# Then run the build once in jenkins blueocean to start
	
	# This is the new Jenkinsfile
	pipeline {
		agent {
			docker {
				image 'composer:latest'
			}
		}
		stages {
			stage('Build') {
				steps {
					sh 'composer install'
				}
			}
			stage('Test') {
				steps {
					sh './vendor/bin/phpunit --log-junit logs/unitreport.xml -c tests/phpunit.xml tests'
				}
			}
		}
		post {
			always {
				junit testResults: 'logs/unitreport.xml'
			}
		}
	}  
	
	# Then run the build in BlueOcean
	
3) Testing the testing
	# Introduce a bug into the code
	# The build fails
	# Can go to the pipline, build history, then test result
	
------------------------------------------ End of Lab 7a -----------------------------------------
Lab 7b
1) Start a new repo for the selenium tests

2) After that run the commands to change the permission of ome files
	# I cd into the repo folder then ran the commands
		git update-index --chmod=+x jenkins/scripts/deploy.sh
		git update-index --chmod=+x jenkins/scripts/kill.sh
		
3) Modify the deploy.sh
	# the file is in jenkins/scripts
	# i chnaged it to 
	# docker run -d -p 80:80 --name my-apache-php-app -v c:\\Users\jerem\Documents\GitHub\\jenkins-php-selenium-test\\src:/var/www/html php:7.2-apache (ERROR)

------------------------------------------ End of Lab 7b -----------------------------------------


Lab 9 
1) Start Jenkins, same as previous labs

2) Install the SonarQube Scanner plugin into Jenkins

3) Pull and run sonarqube image from docker
	# docker pull sonarqube
	# docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest
	
4) Access SonarQube
	# http://localhost:9000/
	# login is 'admin', password is 'adminn'
	
5) Create new manual project
	# name and key is 'OWASP'
	
6) Select Locally
	# generate token using 'textingtoken'
	# I got '702de46796da012c28cf7cf0466bd5f322114710'
	
	# I used python and linux for the OS and language
	# The command was 
		sonar-scanner \
		  -Dsonar.projectKey=OWASP \
		  -Dsonar.sources=. \
		  -Dsonar.host.url=http://localhost:9000 \
		  -Dsonar.login=702de46796da012c28cf7cf0466bd5f322114710
		
7) Configure SonarQube in Jenkins
	# Go to Manage Jenkins > Configure System, then find SonarQube
	# Then 'add SonarQube'
	
8) Adding a new SonarQube
	# Name is 'OWASP'
	# URL is 'http://localhost:9000/' // 'http:// comp.ip :9000'
	# Click the 'add' in the dropdown
	# choice the sercet text at the second dropdown
	# The password is same as the token just now, '702de46796da012c28cf7cf0466bd5f322114710'
	
	# Then 'save'
	
9) Configure in Global tool Configuration
	## Not inside manage Jenkins, Go global tool configuration
	# Go to SonarQube and add a 'SonarQube Scanner'
	
	# The name is 'SonarQube'
	# Click 'save'
	
10) standalone SonarQube scanner
	# docker run --rm -e SONAR_HOST_URL=http://192.168.1.4:9000 -e SONAR_LOGIN=702de46796da012c28cf7cf0466bd5f322114710 -it -v "%cd%:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=OWASP

11) Docker memory issue
	# docker run --memory=3g the-remaining-command
	
--------------------------------------------------------- End Lab ----------------------------------------------------------------------------------------------------------
--------------------------------------------------------- pipline example --------------------------------------------------------------------------------------------------

pipeline {
	agent any
	stages {
		stage('Build') {
			agent {
				docker {
					image 'python:3.9'
				}
			}
			steps {
				sh 'python -m pip install --upgrade pip'
                		sh 'python -m pip install -r fiveDurians/requirements.txt'
            		}
        	}
        	stage('Test Deploy') {
			agent {
				docker {
					image 'python:3.9'
				}
			}
            		steps {
				sh 'python -m pip install --upgrade pip'
                		sh 'python -m pip install -r fiveDurians/requirements.txt'
                		sh 'python fiveDurians/manage.py migrate'
            		}
        	}
		stage('Unit Testing') {
			agent {
				docker {
					image 'python:3.9'
				}
			}
			steps {
				sh 'python -m pip install --upgrade pip'
                		sh 'python -m pip install -r fiveDurians/requirements.txt'
				sh 'python fiveDurians/manage.py migrate'
				sh 'python -m pytest fiveDurians/tests/test_unit_urls.py -rA --junitxml=logs/unittestreport.xml'
			}
			post {
				always{
					junit testResults: 'logs/unittestreport.xml'
				}
			}
		}
		stage('Integration Testing') {
			agent {
				docker {
					image 'python:3.9'
				}
			}
			steps {
				sh 'apt update'
				sh 'apt install firefox-esr -y'
				sh 'python -m pip install --upgrade pip'
                		sh 'python -m pip install -r fiveDurians/requirements.txt'
				sh 'python -m pip install selenium'
				sh 'python -m pip install pep8'
				sh 'python -m pip install pylint'
				sh 'python -m pip install seleniumbase'
				sh 'sbase install geckodriver'
				sh 'export PATH=$PATH:/usr/local/lib/python3.9/site-packages/selenium/drivers'
				sh 'python -m pip install webdriver-manager'
				sh 'python fiveDurians/manage.py migrate'
				sh 'python fiveDurians/manage.py jenkins'
				sh 'nohup python /var/jenkins_home/workspace/FiveDurians@2/fiveDurians/manage.py runserver &'
				sh 'python -m pytest fiveDurians/tests/ -rA --junitxml=logs/uitestreport.xml'
				sh 'pkill -f "python /var/jenkins_home/workspace/FiveDurians@2/fiveDurians/manage.py runserver"'
			}
			post{
				always{
					junit testResults: 'logs/uitestreport.xml'
				}
			}
		}
	}
}

pipeline {
	agent any
	stages {
		stage('Unit Tests') {
		    agent { docker { image 'ubuntu:latest'} }
            steps {
                sh 'apt-get update'
                sh 'ln -fs /usr/share/zoneinfo/UTC /etc/localtime'
                sh 'apt-get install -y python3.8'
                sh 'apt-get install -y python3-pip libmysqlclient-dev curl'
                sh 'curl -LO https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'
                sh 'apt-get install -y ./google-chrome-stable_current_amd64.deb'
                sh 'pip install -r requirements.txt'
				sh 'python3 manage.py test'
            }
            post {
                always {
                    junit 'reports/*.xml'
		        }
            }
        }
        stage('OWASP DependencyCheck') {
		   agent any
			steps {
				dependencyCheck additionalArguments: '--format HTML --format XML', odcInstallation: 'Default'
			}
			post {
			    success {
			        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
			    }
			}
		}
    }
}



	
	
	